name: Ruby

on: [push]

jobs:
  # borrowed from https://github.com/bytecodealliance/cargo-wasi/
  # workflow setup
  cross_compile:
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
      - name: Set up Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            target: ${{ matrix.target }}
            components: rustfmt, clippy

      - uses: actions/cache@v2
        if: matrix.os != 'macos-latest'
        with:
          path: |
            $CARGO_HOME/bin/
            $CARGO_HOME/registry/index/
            $CARGO_HOME/registry/cache/
            $CARGO_HOME/git/db/
            target
          key: ${{ runner.os }}-cargo-${{ steps.toolchain.outputs.rustc_hash}}-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock')}}-${{ hashFiles('../.tool-versions') }}

      # Target older versions of OSX (as old as we reasonably can) to ensure we
      # can run across a wide variety of systems.
      - name: Configure OSX deployment target
        if: matrix.os == 'macos-latest'
        run: |
          echo MACOSX_DEPLOYMENT_TARGET=10.7 >> $GITHUB_ENV

      - uses: actions-rs/cargo@v1
        with:
          command: build

      - uses: actions-rs/cargo@v1
        with:
          command: test

      - uses: actions-rs/cargo@v1
        with:
          command: clippy

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Build shared extension
        run: |
          gem install bundler -v 2.2.3
          bundle install --path vendor/bundle
          bundle exec rake thermite:tarball

      - uses: actions/upload-artifact@v2
        with:
          name: rusty_json_schema-${{ matrix.os }}
          path: json_schema-*.tar.gz

  build:
    runs-on: ubuntu-latest

    needs: [cross_compile]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock')}}-${{ hashFiles('../.tool-versions') }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - uses: actions/download-artifact@v2
      with:
        path: ./

    - name: Prep gems
      run: |
        gem install bundler -v 2.2.3
        bundle install --path vendor/bundle

    - name: Prep shared extension
      run: |
        rake thermite:unpack

    - name: Styling
      run: |
        bundle exec rubocop --display-cop-names

    - name: Tests
      run: |
        bundle exec rspec

    - name: Build gem
      run: |
        gem build *.gemspec

    - uses: actions/upload-artifact@v2
      with:
        name: rusty_json_schema.gem
        path: "*.gem"

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    needs: [build]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
    - uses: actions/download-artifact@v2
      with:
        name: rusty_json_schema.gem

    - uses: actions/download-artifact@v2
      with:
        name: rusty_json_schema-${{ matrix.os }}

    - name: Prep shared extension
      run: |
        rake thermite:unpack

    - name: Install gem
      run: |
        gem install *.gem

    - name: Test gem against platform
      run: |
        bin/integration
